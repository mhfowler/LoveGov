from django.db import models
from django.contrib.auth.models import User
from django.contrib.auth.models import UserManager


########################################################################################################################
################################################# CENTRAL MODELS #######################################################
########################################################################################################################

# This model stores additional information about the user's personal information
class UserProfile(User):
    GENDER_CHOICES = (
        ('M', 'Male'),
        ('F', 'Female'),
    )
    gender = models.CharField(max_length=1, choices=GENDER_CHOICES)
    dob = models.DateField(null=True)
    friends = models.ManyToManyField("self")
    #profile_image = models.ImageField()
    # gives UserProfile access to User methods
    objects = UserManager()
    def __unicode__(self):
        return self.first_name

# This model stores a user's images
class UserImages(models.Model):
    #image = models.ImageField()
    user = models.ForeignKey(User)


class Topic(models.Model):
    topic_text = models.CharField(max_length=50)
    parent_topic = models.ManyToManyField("self")
    def __unicode__(self):
        return self.topic_text

class Elected_Official(UserProfile):
    in_office_since = models.DateField()
    next_election = models.DateField()
    party = models.CharField(max_length=100)

class Politician(UserProfile):
    party = models.CharField(max_length=100)
    office_seeking = models.CharField(max_length=100)

class Group(models.Model):
    name = models.CharField(max_length=100)
    members = models.ManyToManyField(User)


########################################################################################################################
################################################## END CENTRAL MODELS ##################################################
########################################################################################################################

########################################################################################################################
################################################### Q/A TREE ###########################################################
########################################################################################################################

class Question(models.Model):
    QUESTION_TYPE = (
        ('MC', 'Multiple Choice'),
        ('CB', 'Check Box'),
        ('SL', "Sliding Scale")
        )
    question_text = models.CharField(max_length=500)
    question_type = models.CharField(max_length=2, choices=QUESTION_TYPE)
    topic = models.ManyToManyField(Topic)

class Answer(models.Model):
    answer_text = models.CharField(max_length=500)
    question_owner = models.ForeignKey(Question, related_name='+')
    question_next = models.ManyToManyField(Question, through='NextQuestions')

class NextQuestions(models.Model):
    answer = models.ForeignKey(Answer)
    question = models.ForeignKey(Question)
    relevancy = models.IntegerField()

class UserQA(models.Model):
    answer = models.ForeignKey(Answer)


########################################################################################################################
################################################### END Q/A TRE ########################################################
########################################################################################################################

########################################################################################################################
################################################# GEOGRAPHICAL DATA ####################################################
########################################################################################################################

class US_State(models.Model):
    name = models.CharField(max_length=50)

class US_Counties(models.Model):
    name = models.CharField(max_length=50)
    state = models.OneToOneField(US_State)

class US_ConDistr(models.Model):
    number = models.IntegerField()
    state = models.OneToOneField(US_State)

########################################################################################################################
################################################# END GEOGRAPHICAL DATA ################################################
########################################################################################################################

########################################################################################################################
################################################# Representatives ######################################################
########################################################################################################################


class US_SelectMen(Elected_Official):
    represents = models.OneToOneField(US_Counties)

class US_Senator(Elected_Official):
    represents = models.OneToOneField(US_State)

class US_Representative(Elected_Official):
    represents = models.OneToOneField(US_ConDistr)

class US_President(Elected_Official):
    pass

class Committees(models.Model):
    name = models.CharField(max_length=200)

class Senate_Committees(Committees):
    members = models.ManyToManyField(US_Senator)

class Senate_SubCommittees(Senate_Committees):
    sub_members = models.ManyToManyField(US_Senator)

class House_Committees(Committees):
    members = models.ManyToManyField(US_Representative)

class House_SubCommittees(Senate_Committees):
    sub_members = models.ManyToManyField(US_Senator)


########################################################################################################################
################################################# END Representatives ##################################################
########################################################################################################################

########################################################################################################################
################################################# CONTENT ##############################################################
########################################################################################################################

# We need to figure out how to store images

# Abstract type.  All content is linkable
class Content(models.Model):
    topic = models.ManyToManyField(Topic)
    time_date_made = models.DateTimeField()
    user_maker = models.ForeignKey(UserProfile)
    likes = models.IntegerField()
    dislikes = models.IntegerField()
    too_complicated = models.IntegerField()

# Links content with multiple images
class ContentImages(models.Model):
    # image = models.ImageField
    owner = models.ForeignKey(Content)

class Petition(Content):
    summary = models.CharField(max_length=500)
    full_text = models.CharField(max_length=10000)
    send_to_eofficial = models.ManyToManyField(Elected_Official, related_name='id_pet')
    send_to_committee = models.ManyToManyField(Committees, related_name='id_pet')
    signers = models.ManyToManyField(User)

   # main_pic = models.ImageField()

class Event(Content):
    summary = models.CharField(max_length=500)
    full_text = models.CharField(max_length=10000)
    date_of_event = models.DateTimeField()
    attending_users = models.ManyToManyField(UserProfile, related_name='id_yes')
    maybe_users = models.ManyToManyField(UserProfile, related_name='id_maybe')
    no_users = models.ManyToManyField(UserProfile, related_name='id_no')
   # main_pic = models.ImageField()

class NewsArticle(Content):
    title = models.CharField(max_length=500)
    description = models.CharField(max_length=500)
    link = models.URLField()

class Legislation(Content):
    legID = models.CharField(max_length=50)
    title = models.CharField(max_length=500)
    summary = models.CharField(max_length=2000)
    intro_date = models.DateField()
    sponsor = models.OneToOneField(Elected_Official)
    cosponsors = models.ManyToManyField(Elected_Official, related_name='cosponsor')
    last_major_action = models.CharField(max_length=1000)
    full_text = models.CharField(max_length=10000)


########################################################################################################################
################################################# END CONTENT ##########################################################
########################################################################################################################








