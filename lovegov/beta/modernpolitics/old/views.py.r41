__author__ = 'CLAY, MAX'
### README ###
# Max, after working together over the summer in CS32 and learning the importance of documentation, commenting,
# and organization of code, I've designed a simple syntax to more efficiently communicate about methods defined
# below.  Before I get into it, I recommend commenting every line with clear language especially since neither
# of us are experts at python yet so having comments will help us learn from each others progress.

# The following are tags to put in a comment above a method with their definitions.
#
# FINISHED: The code is more or less in its final state and should not be edited without conversing
#
# USABLE: The code handles the task that it is designed to perform.  The specifics of where it will redirect the user
#         are not sorted out and details may be added, but it's usable in it's current state.
#
# BROKEN: The code does not work and should not be used without fixing.
#
# TEST: The code is for testing purposes and not part of the project proper yet.
#
# <NAME>_HELPME: If either you or I are unable to complete a method use this tag to request help. <NAME> should be your
#                name so we know who is requesting help.  This will be useful if we have more coders working with us in
#                the future. So if I were to be asking you for help, I'd write "CLAY_HELPME"
#
# <NAME>_MINE:   If you don't want somebody else to touch your code, use this tag and put your name in <NAME>
#
# You may use multiple tags separated by commas, for example: USABLE, CLAY_MINE would indicate that the code is usable
# but I don't want anybody else to touch it.

from django.template.loader import get_template
from modernpolitics.models import UserProfile
from django.contrib.auth.models import User
from django.http import HttpResponse
from django.shortcuts import render_to_response
from django.template import Context
from django.contrib import auth
from modernpolitics.forms import *
from django.http import *
from django.core.exceptions import ObjectDoesNotExist
from modernpolitics.forms import *
import datetime
from django.contrib import messages
from django.contrib import auth
from django.core.urlresolvers import reverse
from django.contrib.messages import get_messages

########################################################################################################################
############################################# USABLE CODE ##############################################################
########################################################################################################################

### USABLE ###
# This view logs a user into the site.  After a user is logged in, use request.user to access information about the user.
def homePage(request):
    # checks if user requested to POST information
    if request.method == 'POST':
        if 'loginbutton' in request.POST:
            return loginUser(request)
        elif 'submitregistration' in request.POST:
            return registerUser(request)
    else:
        # generate blank Forms
        login_form = LoginForm()
        register_form = RegisterForm()
    # sends to user a page
    return render_to_response('usable/login.html', {'login_form': login_form, 'register_form': register_form})

def loginUser(request):
    # get username and password from request
    username = request.POST.get('username', '')
    password = request.POST.get('password', '')
    # check to see if the entered username and password is valid, assigns output to 'user'
    user = auth.authenticate(username=username, password=password)
    if user is not None and user.is_active:
        # Correct password, and the user is marked "active"
        auth.login(request, user)
        # Redirect to a success page. TODO: do something cooler
        redirect = str(user.id)
        return HttpResponseRedirect(redirect)
    else:
        # return render_to_response('check.html', {'username': username , 'password': password})
        # Show an error page.  TODO: do something cooler
        return render_to_response('usable/fail_login.html')

# This view handles registering new users
def registerUser(request):
    # creates a RegisterForm object with the data the user inputted
    register_form = RegisterForm(request.POST)
    # checks if what the user entered into the RegisterForm is valid input
    if register_form.is_valid():
        # checks to see if 'username' field exists in the database (ie posted username already exists)
        if UserProfile.objects.filter(username=request.POST['email']).exists():
            # if 'username' exists in database, TODO: do something cooler
            return render_to_response('usable/account_exists.html')
        else:
            # if 'username' didn't exist in database, create a new user (with validated input)
            register_form.save(request.POST.copy())
            # TODO: do something cooler
            return render_to_response('usable/register_success.html')
    else:
    # generate blank Forms
        login_form = LoginForm()
        register_form = RegisterForm()
        return render_to_response('usable/login.html', {'login_form': login_form, 'register_form': register_form})
        # generates a blank RegisterForm
       # register_form = RegisterForm().as_p()
        # sends to user a page
   # return render_to_response('usable/create_account.html', {'register_form': register_form})



# USABLE
# This generates the user's profile page.
def profileUser(request):
    u_id = request.path.replace('login','')
    u_id = u_id.replace('/','')
    if UserProfile.objects.filter(id=u_id).exists():
        if (request.user.is_authenticated() and request.user.id==u_id):
            return HttpResponse(u_id + " user's page")
        else:
            return HttpResponse("not your own page")
    # checks if the request contains a user cookie that is authenticated (ie. the user is logged in)
    else:
        return HttpResponse("You are not logged in")
    if request.user.is_authenticated():
        # gets the user's profile information from the database
        userprofile = UserProfile.objects.get(id=request.user.id)
        # returns information about the user in html page
        return render_to_response('usable/check_user_login.html', {'username': request.user.username, 'email': request.user.email, 'gender': userprofile.gender})
    else:
        # returns an error message that you aren't logged in
        return HttpResponse("You are not logged in")

########################################################################################################################
###################################$$$$$###### END USABLE CODE #########################################################
########################################################################################################################

########################################################################################################################
###################################$$$$$###### DEBUGGING CODE #########################################################
########################################################################################################################

# page that shows all users in database
def debugUsers(request):
    users = UserProfile.objects.all()
    tostring = 'users: '
    for user in users:
        tostring += str(user.id) + '-'
        tostring += user.first_name + ' '
    return HttpResponse(tostring)







########################################################################################################################
###################################$$$$$###### END DEBUGGING CODE #######################################################
########################################################################################################################


########################################################################################################################
################################################## TEST CODE ###########################################################
########################################################################################################################

from django.contrib.auth.forms import UserCreationForm
### USABLE ###
# Hey Clay, I couldn't find documentation on RegistrationForm...so I copied your code and put it at the bottom
# and used UserCreationForm which I had documentation on (so that I could experiment with users, and whether or not
# my database was working)
def createUser(request):
    # checks if user requested to POST information
    if request.method == 'POST':
        # creates a RegisterForm object with the data the user inputted
        creation_form = UserCreationForm(request.POST)
        # checks if what the user entered into the RegisterForm is valid input
        if creation_form.is_valid():
            # checks to see if 'username' field exists in the database (ie posted username already exists)
            if UserProfile.objects.filter(username=request.POST['username']).exists():
                # if 'username' exists in database
                return render_to_response('usable/account_exists.html')
            else:
                # if 'username' didn't exist in database, create a new user (with validated input)
                user = form.save()
                return render_to_response('usable/register_success.html')
    else:
        # generates a blank RegisterForm
        creation_form = UserCreationForm().as_p()
        # sends to user a page
    return render_to_response('usable/create_account.html', {'register_form': creation_form})


from modernpolitics.models import Topic

# test database
def testSaveData(request):
    topic = Topic(topic_text='gayrights')
    topic.save()
    user = UserProfile(first_name='testDude', id=99)
    user.save()
    topics = Topic.objects.all()
    stringRep = "list: "
    for x in topics:
        stringRep += x.topic_text + ' '
    return HttpResponse(stringRep)




# This view logs a user into the site.  After a user is logged in, use request.user to access information about the user.
def loginUser_old(request):
    # checks if user requested to POST information
    if request.method == 'POST':
        # references to what the user entered in the login form
        username = request.POST.get('username', '')
        password = request.POST.get('password', '')
        # check to see if the entered username and password is valid, assigns output to 'user'
        user = auth.authenticate(username=username, password=password)
        if user is not None and user.is_active:
            # Correct password, and the user is marked "active"
            auth.login(request, user)
            # login success
            return render_to_response('usable/login_success.html')
        else:
        # return render_to_response('check.html', {'username': username , 'password': password})
            # Show an error page.  TODO: do something cooler
            return render_to_response('usable/fail_login.html')
    else:
        # generate a blank LoginForm
        login_form = LoginForm()
        # sends to user a page
    return render_to_response('test/login_old.html', {'login_form': login_form})





def test(request):
    messages.success( request, 'Test successful' )
    return HttpResponseRedirect( reverse('main_page'))

def main_page(request, template_name ):
    # create dictionary of items to be passed to the template
    c = { messages: get_messages( request ) }

    # render page
    return render_to_response( template_name, c)



    # TEST
# Returns the current date and time
def current_datetime(request):
        current_date = datetime.datetime.now()
        user = TestModel(name='clay')
        user.save()
        # loads the html template (without variables inserted)
        t = get_template('test/current_datetime.html')
        # renders the final html to send to client with variables defined in Context
        html = t.render(Context(locals()))
        return HttpResponse(html)

# TEST
def loginuser(request):
    user = User(username='rioisk3',first_name='clay',last_name='dunwell',email='rioisk@gmail.com',password='texers',is_staff=0,is_active=1,is_superuser=1)
    user.save()
    t = get_template('test/newuser.html')
    html = t.render(Context(locals()))
    return HttpResponse(html)

# TEST
# Iterates over numbers 0 through 10 and returns them.  <br> is an HTML tag to go to the next line
def iterate_num(request):
    j = "0<br>"
    for i in range(1,10):
        j = j + str(i) + "<br>"
    return render_to_response('test/zero_ten.html', {'zero_ten': j})

# TEST
def homepage(request):
    return render_to_response('test/homepage.html')

# TEST
def form(request):
    t = get_template('test/form.html')
    html = t.render(Context())
    return HttpResponse(html)

# TEST
def searchret(request):
    if 'q' in request.GET and request.GET['q']:
        q = request.GET['q']
        search_result = 'You searched for: %r' % request.GET['q']
        tests = TestModel.objects.filter(name__icontains=q)
    else:
        search_result = 'You submitted an empty form.'
    t = get_template('test/search_results.html')
    html = t.render(Context(locals()))
    return HttpResponse(html)



# test base
def test_home(request):
    word = "monkey"
    return render_to_response('home_base.html', locals())

# test inherit
def test_inherit(request):
    word = "banana"
    return render_to_response('home_inherit.html', locals())
########################################################################################################################
################################################## END TEST CODE #######################################################
########################################################################################################################
"""

    """