########################################################################################################################
########################################################################################################################
#
#           Registration
#
#
########################################################################################################################
########################################################################################################################

# lovegov
from lovegov.modernpolitics.initialize import *

#-----------------------------------------------------------------------------------------------------------------------
# Resets a users password and sends an email.
#-----------------------------------------------------------------------------------------------------------------------
def resetPassword(user):
    password = generateRandomPassword(10)
    print ("password: " + password)
    user.set_password(password)
    user.save()
    sendPasswordChangeEmail(user, password)

#-----------------------------------------------------------------------------------------------------------------------
# Creates a user for the alpha based on name and email (with autogenerated password)
# args: name, email
#-----------------------------------------------------------------------------------------------------------------------
def createAlphaUser(name, email):
    password = generateRandomPassword(10)
    createUser(name, email, password)
    sendAlphaTesterEmail(name, email, password)

def createFBUser(name, email):
    password = generateRandomPassword(10)
    control = createUser(name, email, password)
    vals = {'name':name,'email':email,'password':password}
    sendTemplateEmail(subject="Welcome to LoveGov", template="facebookRegister.html", dictionary=vals, email_sender='info@lovegov.com', email_recipient=email)
    return control

def createTwitterUser(name, email, vals={}):
    password = generateRandomPassword(10)
    control = createUser(name, email, password)
    vals['name'] = name
    vals['email'] = email
    vals['password'] = password
    vals['confirmation_link'] = control.user_profile.confirmation_link
    sendTemplateEmail(subject="Welcome to LoveGov", template="twitterRegister.html", dictionary=vals, email_sender='info@lovegov.com', email_recipient=email)
    return control

#-------------------------------------------------------------------------------------------------------------------
# creates a new userprofile from name, email and password, along with controlling user to manage this profile.
# - name, email, password
#-------------------------------------------------------------------------------------------------------------------
def createUser(name, email, password, active=True):
    if not ControllingUser.objects.filter(username=email):
        control = ControllingUser.objects.create_user(username=email, email=email, password=password)
        control.is_active = active
        control.save()
        user_profile = createUserHelper(control=control, name=name, active=active)
        control.user_profile = user_profile
        control.save()
        return control
    else:
        normal_logger.error("Attempt to create account with duplicate email address")
        return None

#-------------------------------------------------------------------------------------------------------------------
# creates a new userprofile from name, email and password, along with controlling user to manage this profile.
# - name, email, password
#-------------------------------------------------------------------------------------------------------------------
def createUserHelper(control,name,active=True):
    # new user profile
    userProfile = UserProfile()
    names = name.split(" ")
    if len(names) == 2:
        userProfile.first_name = names[0]
        userProfile.last_name = names[1]
    elif len(names) > 2:
        userProfile.first_name = names[0] + " " + names[1]
        userProfile.last_name = names[2]
    else:
        userProfile.first_name = names[0]
        userProfile.last_name = ""

    userProfile.email = control.email
    userProfile.username = control.username
    # active
    userProfile.is_active = active
    userProfile.confirmation_link = str(random.randint(1,9999999999999999999))
    # worldview
    world_view = WorldView()
    world_view.save()
    userProfile.view = world_view
    userProfile.save()
    # alias
    userProfile.makeAlias()
    # filter settings
    filter_setting = getDefaultFilter()
    userProfile.filter_setting = filter_setting
    # notification settings
    userProfile.initNotificationSettings()
    # connections group and lovegov group and join or create network group
    userProfile.createIFollowGroup()
    userProfile.createFollowMeGroup()
    userProfile.joinLoveGovGroup()
    userProfile.createDefaultFilter()
    # associate with control
    userProfile.user = control
    userProfile.save()
    # return user prof
    return userProfile

