########################################################################################################################
########################################################################################################################
#
#           Registration
#
#
########################################################################################################################
########################################################################################################################

# lovegov
from lovegov.modernpolitics.initialize import *

#-----------------------------------------------------------------------------------------------------------------------
# Register from email form
#-----------------------------------------------------------------------------------------------------------------------
def registerHelper(name, email, password, day=None, month=None, year=None, zip=None, request=None):

    user = createUser(name,email,password,request=request)
    user.backend = 'django.contrib.auth.backends.ModelBackend'
    user.save()

    user_profile = user.user_profile

    if zip:
        user_profile.setZipCode(zip)

    if year and month and day:
        dob = datetime.date(year=year, month=month, day=day)
        user_profile.setDOB(dob)

    return user_profile

#-----------------------------------------------------------------------------------------------------------------------
# Creates a user for the alpha based on name and email (with autogenerated password)
# args: name, email
#-----------------------------------------------------------------------------------------------------------------------
def createFBUser(name, email, request=None):
    password = generateRandomPassword(10)
    control = createUser(name, email, password, verified=True, request=request)
    return control

def createTwitterUser(name, email, vals={}, request=None):
    password = generateRandomPassword(10)
    control = createUser(name, email, password, request=request)
    return control

#-------------------------------------------------------------------------------------------------------------------
# creates a new userprofile from name, email and password, along with controlling user to manage this profile.
# - name, email, password
#-------------------------------------------------------------------------------------------------------------------
def createUser(name, email, password,active=True, verified=False, request=None):
    # NORMAL CASE
    if not ControllingUser.objects.filter(email=email):
        from string import letters
        from random import choice
        random_username = ''.join([choice(letters) for i in xrange(30)])
        while ControllingUser.objects.filter(username=random_username):
            random_username = ''.join([choice(letters) for i in xrange(30)])
        control = ControllingUser.objects.create_user(username=random_username, email=email, password=password)
        control.is_active = active
        control.save()
        logger.debug("created control: " + control.email)
        user_profile = createUserHelper(control=control, name=name, active=active, verified=verified, request=request)
        logger.debug("created userpof: " + user_profile.get_name())
        control.user_profile = user_profile
        control.save()
        return control

    # SPECIAL CASE FOR CREATING USERS DURING PARSE SCRIPTS
    else:
        logger.error("DUPLICATE USERNAME REGISTRATION.")
        splitted = email.split("@")
        if len(splitted)==1:
            c = ControllingUser.objects.get(username=email)
            c.delete()
            return createUser(name, email, password, active)
        else:
            if splitted[1] == "lovegov.com":
                c = ControllingUser.objects.get(username=email)
                c.delete()
                return createUser(name, email, password, active)

#-------------------------------------------------------------------------------------------------------------------
# creates a new userprofile from name, email and password, along with controlling user to manage this profile.
# - name, email, passwordtype='userProfile'
#-------------------------------------------------------------------------------------------------------------------
def createUserHelper(control,name,active=True,verified=False, request=None):

    user_profile = UserProfile()

    names = name.split()
    num_names = len(names)
    first_name = ""
    last_name = ""
    for i,name in enumerate(names):
        name = enc(name).capitalize()
        if i==0:
            first_name = name
        elif i < (num_names-1):
            first_name += " " + name
        else:
            last_name = name
    user_profile.first_name = first_name
    user_profile.last_name = last_name

    user_profile.email = control.email
    user_profile.username = control.username

    # active
    user_profile.is_active = active
    user_profile.confirmation_link = str(random.randint(1,9999999999999999999))

    # worldview
    world_view = WorldView()
    world_view.save()
    user_profile.view = world_view
    user_profile.save()

    # alias
    user_profile.makeAlias()

    # connections group and lovegov group and join or create network group
    user_profile.createIFollowGroup()
    user_profile.createFollowMeGroup()
    user_profile.joinLoveGovGroup()

    # auto subscribe to some groups?
    user_profile.autoSubscribe()

    # associate with control
    user_profile.user = control
    user_profile.save()

    # get notifications that were associated with this user's email prior to registration
    notifications = Notification.objects.filter(notify_email=user_profile.email)
    for n in notifications:
        n.claimedByProfile(user_profile)

    # get cookie data and add stuff to userprofile, if there is cookie in request
    if request:
        cookie_data_id = request.COOKIES.get('cookie_data_id')
        if cookie_data_id:
            cookie_data = CookieData.objects.get(id=cookie_data_id)
            if not cookie_data.claimed:
                cookie_data.claimedByProfile(user_profile)
            else:
                lg_logger.critical("User tried to register with cookie_data_id of cookie which had already been claimed.")

    # send confirmation email
    sendConfirmationEmail(user_profile, verified=verified)

    # return user prof
    return user_profile
